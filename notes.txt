C Notes

fflush to immediately display the contents of an output stream instead of buffering them and then writing it to an stdout or file (for immediate feedback)
printf and fprinf - former stdout, latter to a file or named output stream
* is pointer, & is address of * (e.g. *ptr = &a, menaing ptr now holds address of a) 
r w a for read, write and append, b to everything for binary
r+ read when file exists, w+ read and write, create file when file does not exist, if exist, truncate (delete) the contents, a+ read and append, same with w+ but at the end of the file
%s - string, %d - int, %f - float (%1.f -> up to 1 decimal), %c - char, $lf - double (up to 15 decimals)
For quotation marks: use escape sequence \ (\"string\" would be "string")
struct to create a structure, typedef to give alias to this structure (for e.g struct student {vars}; -> each time when we call this struct, it would be struct student s1; // with typedef sturct student {vars} Student; -> Student s1)
const before datatype ensures that no changes happen to input in function, still allows both const and non-const arguments in funcs
\r is Carrigae return char
strchr(given string, search char in string): can also be used like strchr(specified char, next to find char) to find the next char after the specified char in the string, also do (ptr+1, char) for char after ptr
static inside a function : retains the values until the program ends, retains in successive calls to funcs : for e.g. if static char buffer[50] = "Initial"; snprintf(buffer, sizeof(buffer), "Modify"), when the func is called first time, it will give Initial and Modify when called second time 
static outside a function will be limited to the file it exists
snprintf to format and store a series of chars into buffer, allows to specify max num of chars, snprintf(char *str, sizeof(str), format,..), if buffer size is small, data will be truncated

libpng 
png_structp - pointer to png_struct, central, holds info about PNG file and state of PNG writing/reading process
png_infop - pointer to metadata of PNG file such as width, height, color type etc. also info about various chunks of information
png_create_read_struct(png lib version, error ptr, error handler, warn handler)
setjmp - when lib faces error, it wants to longjmp back to the routine, setjmp to save the current env for longjmp to use (need to use png ptr which is png_jmpbuf)

libjpeg
jpeg_decompress_struct - like png_struct, cinfo - instance of struct
jpeg_error_mgr - error handler struct, contains pointer, jerr is an instance of that struct 
cinfo.err is field of cinfo (address of jerr in assigned to this)
jpeg_create_decompress initializes the jpeg decompression object
jpeg_stdio_src makes decompression object read from file(&cinfo for struct, fp for file)
jpeg_read_header reads the header of JPEG which has basic info like width, height, color,
JSAMPLE - represents a single sample or pixel value,normally char
JSAMPROW - ptr to a row of samples, single scanline 
JSAMPARRAY - ptr to an array of rows, a 2D array where each element is a scanline 
alloc_sarray -memory management structure to allocated a 2D array of samples
j_common_ptr - generic pointer type for both compression and decompression
JPOOL_IMAGE - memory pool for allocation, will be freed when the decompression object is destroyed

SDL for Rendering Image
SDL_INIT_VIDEO - To initiate SDL and Video (Image)
SDL_CreateWindow(const char *title, pos x of window, pos y of window, width, height, flags like SDL_WINDOW_FULLSCREEEN, shown, hidden, resizable)
SDL_Renderer(window instance/ptr to struct, index (if -1 is passed, choose the first driver that supports the flags), SDL_RENDERER_ACCELERATED for hardware acceleration, software for software fallback, presentvsync, targettexture)
SDL_Surface stores the raw pixel data and bit info of image file
SDL_CreateTextureFromSurface creates texture from stored raw pixel surface data
SDL_Event to hold events of SDL instance

Libsodium for Argon2
Common context in libsodium :  0 on success, -1 on failure and 1 if already started
sodium_init to initalize the lib, have context
crypto_pwhash_STRBYTES - 128, for storing the complete hashed password string with metadata, for storage and verification, /// there are also BYTES for when only raw hash output is needed, SALTBYTES for defining salt size to ensure unique hashes
crypto_pwhash_OPSLIMIT_* for time cost, MEMLIMIT_* for memory cost, can be choosen between INTERACTIVE, MODERATE, and SENSITIVE (low to high)
crypto_pwhash_str(output_hash, input_string, strlen(input), time cost, memory cost), have context
crypto_pwhash_str_verify(hashed_string, input_password, strlen(input_string)) to verify the hash. Has common context

zxcvbn library for password strength checker
ZxcMatch_t : struct of ZxcMatch(Begin begin, Length length, Entrpy entropy, MltEnpy multipart password, Type matching types like dict match, struct ZxcMatch *Next)
ZxcvbnMatch : main password matching func (password, user defined dict, info on matches), return the entropy in bits
ZxcvbnFreeInfo : matches data should be freed after func is done